<html>
<head>
    <title>module.js test</title>   
    <script language="JavaScript" src="/javascripts/jsunit/jsUnitCore.js"></script>
		<script src="/javascript/module.js"></script>
</head>
<body>

<script>

function testIncludeModule() {
	// first, test good test data
	// for each value in goodModules, make sure that including every other module into it works as expected
	// e.g. all the properties are copied over, and none of the properties in the module are altered
	for (var recipientKey in testData.goodModules) {
		for (var moduleKey in testData.goodModules) {
			// get our values, and track the module's original state to ensure no changes
			var receiver, moduleOriginalState, module;
			receiver = testData.goodModules[recipientKey];
			module = moduleOriginalState = testData.goodModules[moduleKey];
			
			// include the module into the receiver
			_includeModule(module, receiver);
			
			// verify the module is unchanged
			assertObjectEquals("_includeModule altered the state of the module!", module, moduleOriginalState);
			
			// now verify everything in module is equal to the equivalents in 
			
		
	}
}

function setUp() {}
function tearDown() {}

var testData;

function _initTestData() {
  testData = {};
  testData.goodModules = {};
	// all properties
	testData.goodModules["properties_no_prototype"] = function() {
		this.a = 2;
		this.b = 3;
		this.c = "abc";
	}();
	// all functions
	testData.goodModules["functions_no_prototype"] = function() {
		this.d = function() { a = 3 };
		this.e = function() { return "foo"; };
		this.f = function() { }
	}();
	// all properties
	testData.goodModules["mixed_no_prototype"] = function() {
		this.a = "abc";
		this.b = "def";
		this.c = 1231231;
		this.d = function() { return false };
		this.e = function() { "bc" };
		this.f = function() { }
	}();
	testData.goodModules["properties"] = function() {
		this.a = 2;
		this.b = 3;
		this.c = "abc";
		this.prototype.a2 = "a";
		this.prototype.b2 = 4;
		this.prototype.c2 = null;
	}();
	// all functions
	testData.goodModules["functions"] = function() {
		this.d = function() { a = 3 };
		this.e = function() { return "foo"; };
		this.f = function() { };
		this.prototype.d2 = function() { return true; };
		this.prototype.e2 = function() { b = 3; };
		this.prototype.f2 = function() { }
	}();
	// all properties
	testData.goodModules["mixed_no_prototype"] = function() {
		this.a = "abc";
		this.b = "def";
		this.c = 1231231;
		this.prototype.a2 = "a";
		this.prototype.b2 = 4;
		this.prototype.c2 = null;
		this.d = function() { return false };
		this.e = function() { "bc" };
		this.f = function() { }
		this.prototype.d2 = function() { return true; };
		this.prototype.e2 = function() { b = 3; };
		this.prototype.f2 = function() { }
	}();
	// all functions
	testData.goodModules["emptyFunction"] = function() {}();
	testData.goodModules["emptyArray"] = {};
	testData.goodModules["emptyHash"] = [];
	x = "f";
	x.foo = 2;
	x.prototype.bar = "3";
	testData.goodModules["enumeratedString"] = x;
	x = 2;
	x.foo = "f";
	x.prototype.bar = 1;
	testData.goodModules["enumeratedNumber"] = x;
	

  testData.badModules = {};
  testData.badModules["null"] = null;
  testData.badModules["string"] = "foo and bar!";
	testData.badModules["number"] = 2;
}


</script>

</body>
</html>
